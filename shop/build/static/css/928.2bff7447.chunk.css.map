{"version":3,"file":"static/css/928.2bff7447.chunk.css","mappings":"AAUA,KACI,SAFgB,CAGnB,qBAGG,gBAAiB,CAEjB,iBAAkB,CAGlB,YAFA,eAAiB,CAFjB,YAAc,CAGd,UACa,CAKhB,WAIG,kBAAmB,CACtB,yBAKG,eAAgB,CACnB,WAuBG,SAAU,CACb,kBAGG,SAAU,CACV,kBAAqB","sources":["Detail.scss"],"sourcesContent":["// import\r\n\r\n\r\n// extend  VS mixin \r\n// 선택자간의 연관성이 존재한다면 extend를 사용하고, \r\n// 연관성은 없지만 코드가 겹치는 선택자들이라면 mixin으로 소스코드의 중복을 없애기 위해 사용해야합니다.\r\n\r\n\r\n// 변수선언\r\n$mainColor : #ff0000;\r\n.red {\r\n    color : $mainColor;\r\n}\r\n\r\n@mixin set() {\r\n    background: #eeee;\r\n    padding : 20px;\r\n    border-radius: 5px;\r\n    max-width : 500px;\r\n    width : 100%;\r\n    margin : auto;\r\n}\r\n\r\n.my-alert{\r\n    @include set()\r\n}\r\n\r\n.my-alert2 {\r\n    @extend .my-alert;\r\n    background: #ffe591;\r\n}\r\n\r\n//  mixin === function\r\n\r\n.my-alert p {\r\n    margin-bottom: 0;\r\n}\r\n\r\n\r\n// div.container h4 {\r\n//     color : blue;\r\n// }\r\n\r\n// div.container p {\r\n//     color : green;\r\n// }\r\n\r\n// scss nesting 문법\r\n// div.container {\r\n//     h4{\r\n//         color : blue;\r\n//     }\r\n\r\n//     p{\r\n//         color : green;\r\n//     }\r\n// }\r\n\r\n.wow-enter {\r\n    opacity: 0;\r\n}\r\n\r\n.wow-enter-active {\r\n    opacity: 1;\r\n    transition: all 500ms;\r\n}"],"names":[],"sourceRoot":""}